// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package playlist

import (
	"context"
	playlistModel "github.com/nabiel-syarif/playlist-api/internal/model/playlist"
	"sync"
)

// Ensure, that UsecaseMock does implement Usecase.
// If this is not the case, regenerate this file with moq.
var _ Usecase = &UsecaseMock{}

// UsecaseMock is a mock implementation of Usecase.
//
// 	func TestSomethingThatUsesUsecase(t *testing.T) {
//
// 		// make and configure a mocked Usecase
// 		mockedUsecase := &UsecaseMock{
// 			AttachSongToPlaylistFunc: func(ctx context.Context, userId int, playlistId int, songId int) error {
// 				panic("mock out the AttachSongToPlaylist method")
// 			},
// 			DeletePlaylistFunc: func(ctx context.Context, userId int, playlistId int) error {
// 				panic("mock out the DeletePlaylist method")
// 			},
// 			DetachSongFromPlaylistFunc: func(ctx context.Context, userId int, playlistId int, songId int) error {
// 				panic("mock out the DetachSongFromPlaylist method")
// 			},
// 			GetPlaylistByIdFunc: func(ctx context.Context, userId int, playlistId int) (playlistModel.PlaylistAggregated, error) {
// 				panic("mock out the GetPlaylistById method")
// 			},
// 			ListPlaylistsFunc: func(ctx context.Context, userId int) ([]playlistModel.PlaylistAggregated, error) {
// 				panic("mock out the ListPlaylists method")
// 			},
// 			SavePlaylistFunc: func(ctx context.Context, req playlistModel.AddPlaylistRequest) (playlistModel.PlaylistAggregated, error) {
// 				panic("mock out the SavePlaylist method")
// 			},
// 			UpdatePlaylistFunc: func(ctx context.Context, req playlistModel.UpdatePlaylistRequest) (playlistModel.PlaylistAggregated, error) {
// 				panic("mock out the UpdatePlaylist method")
// 			},
// 		}
//
// 		// use mockedUsecase in code that requires Usecase
// 		// and then make assertions.
//
// 	}
type UsecaseMock struct {
	// AttachSongToPlaylistFunc mocks the AttachSongToPlaylist method.
	AttachSongToPlaylistFunc func(ctx context.Context, userId int, playlistId int, songId int) error

	// DeletePlaylistFunc mocks the DeletePlaylist method.
	DeletePlaylistFunc func(ctx context.Context, userId int, playlistId int) error

	// DetachSongFromPlaylistFunc mocks the DetachSongFromPlaylist method.
	DetachSongFromPlaylistFunc func(ctx context.Context, userId int, playlistId int, songId int) error

	// GetPlaylistByIdFunc mocks the GetPlaylistById method.
	GetPlaylistByIdFunc func(ctx context.Context, userId int, playlistId int) (playlistModel.PlaylistAggregated, error)

	// ListPlaylistsFunc mocks the ListPlaylists method.
	ListPlaylistsFunc func(ctx context.Context, userId int) ([]playlistModel.PlaylistAggregated, error)

	// SavePlaylistFunc mocks the SavePlaylist method.
	SavePlaylistFunc func(ctx context.Context, req playlistModel.AddPlaylistRequest) (playlistModel.PlaylistAggregated, error)

	// UpdatePlaylistFunc mocks the UpdatePlaylist method.
	UpdatePlaylistFunc func(ctx context.Context, req playlistModel.UpdatePlaylistRequest) (playlistModel.PlaylistAggregated, error)

	// calls tracks calls to the methods.
	calls struct {
		// AttachSongToPlaylist holds details about calls to the AttachSongToPlaylist method.
		AttachSongToPlaylist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId int
			// PlaylistId is the playlistId argument value.
			PlaylistId int
			// SongId is the songId argument value.
			SongId int
		}
		// DeletePlaylist holds details about calls to the DeletePlaylist method.
		DeletePlaylist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId int
			// PlaylistId is the playlistId argument value.
			PlaylistId int
		}
		// DetachSongFromPlaylist holds details about calls to the DetachSongFromPlaylist method.
		DetachSongFromPlaylist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId int
			// PlaylistId is the playlistId argument value.
			PlaylistId int
			// SongId is the songId argument value.
			SongId int
		}
		// GetPlaylistById holds details about calls to the GetPlaylistById method.
		GetPlaylistById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId int
			// PlaylistId is the playlistId argument value.
			PlaylistId int
		}
		// ListPlaylists holds details about calls to the ListPlaylists method.
		ListPlaylists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId int
		}
		// SavePlaylist holds details about calls to the SavePlaylist method.
		SavePlaylist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req playlistModel.AddPlaylistRequest
		}
		// UpdatePlaylist holds details about calls to the UpdatePlaylist method.
		UpdatePlaylist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req playlistModel.UpdatePlaylistRequest
		}
	}
	lockAttachSongToPlaylist   sync.RWMutex
	lockDeletePlaylist         sync.RWMutex
	lockDetachSongFromPlaylist sync.RWMutex
	lockGetPlaylistById        sync.RWMutex
	lockListPlaylists          sync.RWMutex
	lockSavePlaylist           sync.RWMutex
	lockUpdatePlaylist         sync.RWMutex
}

// AttachSongToPlaylist calls AttachSongToPlaylistFunc.
func (mock *UsecaseMock) AttachSongToPlaylist(ctx context.Context, userId int, playlistId int, songId int) error {
	if mock.AttachSongToPlaylistFunc == nil {
		panic("UsecaseMock.AttachSongToPlaylistFunc: method is nil but Usecase.AttachSongToPlaylist was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		UserId     int
		PlaylistId int
		SongId     int
	}{
		Ctx:        ctx,
		UserId:     userId,
		PlaylistId: playlistId,
		SongId:     songId,
	}
	mock.lockAttachSongToPlaylist.Lock()
	mock.calls.AttachSongToPlaylist = append(mock.calls.AttachSongToPlaylist, callInfo)
	mock.lockAttachSongToPlaylist.Unlock()
	return mock.AttachSongToPlaylistFunc(ctx, userId, playlistId, songId)
}

// AttachSongToPlaylistCalls gets all the calls that were made to AttachSongToPlaylist.
// Check the length with:
//     len(mockedUsecase.AttachSongToPlaylistCalls())
func (mock *UsecaseMock) AttachSongToPlaylistCalls() []struct {
	Ctx        context.Context
	UserId     int
	PlaylistId int
	SongId     int
} {
	var calls []struct {
		Ctx        context.Context
		UserId     int
		PlaylistId int
		SongId     int
	}
	mock.lockAttachSongToPlaylist.RLock()
	calls = mock.calls.AttachSongToPlaylist
	mock.lockAttachSongToPlaylist.RUnlock()
	return calls
}

// DeletePlaylist calls DeletePlaylistFunc.
func (mock *UsecaseMock) DeletePlaylist(ctx context.Context, userId int, playlistId int) error {
	if mock.DeletePlaylistFunc == nil {
		panic("UsecaseMock.DeletePlaylistFunc: method is nil but Usecase.DeletePlaylist was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		UserId     int
		PlaylistId int
	}{
		Ctx:        ctx,
		UserId:     userId,
		PlaylistId: playlistId,
	}
	mock.lockDeletePlaylist.Lock()
	mock.calls.DeletePlaylist = append(mock.calls.DeletePlaylist, callInfo)
	mock.lockDeletePlaylist.Unlock()
	return mock.DeletePlaylistFunc(ctx, userId, playlistId)
}

// DeletePlaylistCalls gets all the calls that were made to DeletePlaylist.
// Check the length with:
//     len(mockedUsecase.DeletePlaylistCalls())
func (mock *UsecaseMock) DeletePlaylistCalls() []struct {
	Ctx        context.Context
	UserId     int
	PlaylistId int
} {
	var calls []struct {
		Ctx        context.Context
		UserId     int
		PlaylistId int
	}
	mock.lockDeletePlaylist.RLock()
	calls = mock.calls.DeletePlaylist
	mock.lockDeletePlaylist.RUnlock()
	return calls
}

// DetachSongFromPlaylist calls DetachSongFromPlaylistFunc.
func (mock *UsecaseMock) DetachSongFromPlaylist(ctx context.Context, userId int, playlistId int, songId int) error {
	if mock.DetachSongFromPlaylistFunc == nil {
		panic("UsecaseMock.DetachSongFromPlaylistFunc: method is nil but Usecase.DetachSongFromPlaylist was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		UserId     int
		PlaylistId int
		SongId     int
	}{
		Ctx:        ctx,
		UserId:     userId,
		PlaylistId: playlistId,
		SongId:     songId,
	}
	mock.lockDetachSongFromPlaylist.Lock()
	mock.calls.DetachSongFromPlaylist = append(mock.calls.DetachSongFromPlaylist, callInfo)
	mock.lockDetachSongFromPlaylist.Unlock()
	return mock.DetachSongFromPlaylistFunc(ctx, userId, playlistId, songId)
}

// DetachSongFromPlaylistCalls gets all the calls that were made to DetachSongFromPlaylist.
// Check the length with:
//     len(mockedUsecase.DetachSongFromPlaylistCalls())
func (mock *UsecaseMock) DetachSongFromPlaylistCalls() []struct {
	Ctx        context.Context
	UserId     int
	PlaylistId int
	SongId     int
} {
	var calls []struct {
		Ctx        context.Context
		UserId     int
		PlaylistId int
		SongId     int
	}
	mock.lockDetachSongFromPlaylist.RLock()
	calls = mock.calls.DetachSongFromPlaylist
	mock.lockDetachSongFromPlaylist.RUnlock()
	return calls
}

// GetPlaylistById calls GetPlaylistByIdFunc.
func (mock *UsecaseMock) GetPlaylistById(ctx context.Context, userId int, playlistId int) (playlistModel.PlaylistAggregated, error) {
	if mock.GetPlaylistByIdFunc == nil {
		panic("UsecaseMock.GetPlaylistByIdFunc: method is nil but Usecase.GetPlaylistById was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		UserId     int
		PlaylistId int
	}{
		Ctx:        ctx,
		UserId:     userId,
		PlaylistId: playlistId,
	}
	mock.lockGetPlaylistById.Lock()
	mock.calls.GetPlaylistById = append(mock.calls.GetPlaylistById, callInfo)
	mock.lockGetPlaylistById.Unlock()
	return mock.GetPlaylistByIdFunc(ctx, userId, playlistId)
}

// GetPlaylistByIdCalls gets all the calls that were made to GetPlaylistById.
// Check the length with:
//     len(mockedUsecase.GetPlaylistByIdCalls())
func (mock *UsecaseMock) GetPlaylistByIdCalls() []struct {
	Ctx        context.Context
	UserId     int
	PlaylistId int
} {
	var calls []struct {
		Ctx        context.Context
		UserId     int
		PlaylistId int
	}
	mock.lockGetPlaylistById.RLock()
	calls = mock.calls.GetPlaylistById
	mock.lockGetPlaylistById.RUnlock()
	return calls
}

// ListPlaylists calls ListPlaylistsFunc.
func (mock *UsecaseMock) ListPlaylists(ctx context.Context, userId int) ([]playlistModel.PlaylistAggregated, error) {
	if mock.ListPlaylistsFunc == nil {
		panic("UsecaseMock.ListPlaylistsFunc: method is nil but Usecase.ListPlaylists was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId int
	}{
		Ctx:    ctx,
		UserId: userId,
	}
	mock.lockListPlaylists.Lock()
	mock.calls.ListPlaylists = append(mock.calls.ListPlaylists, callInfo)
	mock.lockListPlaylists.Unlock()
	return mock.ListPlaylistsFunc(ctx, userId)
}

// ListPlaylistsCalls gets all the calls that were made to ListPlaylists.
// Check the length with:
//     len(mockedUsecase.ListPlaylistsCalls())
func (mock *UsecaseMock) ListPlaylistsCalls() []struct {
	Ctx    context.Context
	UserId int
} {
	var calls []struct {
		Ctx    context.Context
		UserId int
	}
	mock.lockListPlaylists.RLock()
	calls = mock.calls.ListPlaylists
	mock.lockListPlaylists.RUnlock()
	return calls
}

// SavePlaylist calls SavePlaylistFunc.
func (mock *UsecaseMock) SavePlaylist(ctx context.Context, req playlistModel.AddPlaylistRequest) (playlistModel.PlaylistAggregated, error) {
	if mock.SavePlaylistFunc == nil {
		panic("UsecaseMock.SavePlaylistFunc: method is nil but Usecase.SavePlaylist was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req playlistModel.AddPlaylistRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockSavePlaylist.Lock()
	mock.calls.SavePlaylist = append(mock.calls.SavePlaylist, callInfo)
	mock.lockSavePlaylist.Unlock()
	return mock.SavePlaylistFunc(ctx, req)
}

// SavePlaylistCalls gets all the calls that were made to SavePlaylist.
// Check the length with:
//     len(mockedUsecase.SavePlaylistCalls())
func (mock *UsecaseMock) SavePlaylistCalls() []struct {
	Ctx context.Context
	Req playlistModel.AddPlaylistRequest
} {
	var calls []struct {
		Ctx context.Context
		Req playlistModel.AddPlaylistRequest
	}
	mock.lockSavePlaylist.RLock()
	calls = mock.calls.SavePlaylist
	mock.lockSavePlaylist.RUnlock()
	return calls
}

// UpdatePlaylist calls UpdatePlaylistFunc.
func (mock *UsecaseMock) UpdatePlaylist(ctx context.Context, req playlistModel.UpdatePlaylistRequest) (playlistModel.PlaylistAggregated, error) {
	if mock.UpdatePlaylistFunc == nil {
		panic("UsecaseMock.UpdatePlaylistFunc: method is nil but Usecase.UpdatePlaylist was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req playlistModel.UpdatePlaylistRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockUpdatePlaylist.Lock()
	mock.calls.UpdatePlaylist = append(mock.calls.UpdatePlaylist, callInfo)
	mock.lockUpdatePlaylist.Unlock()
	return mock.UpdatePlaylistFunc(ctx, req)
}

// UpdatePlaylistCalls gets all the calls that were made to UpdatePlaylist.
// Check the length with:
//     len(mockedUsecase.UpdatePlaylistCalls())
func (mock *UsecaseMock) UpdatePlaylistCalls() []struct {
	Ctx context.Context
	Req playlistModel.UpdatePlaylistRequest
} {
	var calls []struct {
		Ctx context.Context
		Req playlistModel.UpdatePlaylistRequest
	}
	mock.lockUpdatePlaylist.RLock()
	calls = mock.calls.UpdatePlaylist
	mock.lockUpdatePlaylist.RUnlock()
	return calls
}
