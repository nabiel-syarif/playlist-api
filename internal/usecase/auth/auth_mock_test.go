// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	authModel "github.com/nabiel-syarif/playlist-api/internal/model/auth"
	"sync"
)

// Ensure, that RepoMock does implement Repo.
// If this is not the case, regenerate this file with moq.
var _ Repo = &RepoMock{}

// RepoMock is a mock implementation of Repo.
//
// 	func TestSomethingThatUsesRepo(t *testing.T) {
//
// 		// make and configure a mocked Repo
// 		mockedRepo := &RepoMock{
// 			GetUserByEmailFunc: func(ctx context.Context, email string) (authModel.User, error) {
// 				panic("mock out the GetUserByEmail method")
// 			},
// 			GetUserByUserIdFunc: func(ctx context.Context, userId int) (authModel.User, error) {
// 				panic("mock out the GetUserByUserId method")
// 			},
// 			GetUsersByUsersIdFunc: func(ctx context.Context, userIds []int) ([]authModel.User, error) {
// 				panic("mock out the GetUsersByUsersId method")
// 			},
// 			RegisterFunc: func(ctx context.Context, newUser authModel.UserRegistration) (authModel.User, error) {
// 				panic("mock out the Register method")
// 			},
// 		}
//
// 		// use mockedRepo in code that requires Repo
// 		// and then make assertions.
//
// 	}
type RepoMock struct {
	// GetUserByEmailFunc mocks the GetUserByEmail method.
	GetUserByEmailFunc func(ctx context.Context, email string) (authModel.User, error)

	// GetUserByUserIdFunc mocks the GetUserByUserId method.
	GetUserByUserIdFunc func(ctx context.Context, userId int) (authModel.User, error)

	// GetUsersByUsersIdFunc mocks the GetUsersByUsersId method.
	GetUsersByUsersIdFunc func(ctx context.Context, userIds []int) ([]authModel.User, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, newUser authModel.UserRegistration) (authModel.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserByEmail holds details about calls to the GetUserByEmail method.
		GetUserByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// GetUserByUserId holds details about calls to the GetUserByUserId method.
		GetUserByUserId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId int
		}
		// GetUsersByUsersId holds details about calls to the GetUsersByUsersId method.
		GetUsersByUsersId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserIds is the userIds argument value.
			UserIds []int
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NewUser is the newUser argument value.
			NewUser authModel.UserRegistration
		}
	}
	lockGetUserByEmail    sync.RWMutex
	lockGetUserByUserId   sync.RWMutex
	lockGetUsersByUsersId sync.RWMutex
	lockRegister          sync.RWMutex
}

// GetUserByEmail calls GetUserByEmailFunc.
func (mock *RepoMock) GetUserByEmail(ctx context.Context, email string) (authModel.User, error) {
	if mock.GetUserByEmailFunc == nil {
		panic("RepoMock.GetUserByEmailFunc: method is nil but Repo.GetUserByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockGetUserByEmail.Lock()
	mock.calls.GetUserByEmail = append(mock.calls.GetUserByEmail, callInfo)
	mock.lockGetUserByEmail.Unlock()
	return mock.GetUserByEmailFunc(ctx, email)
}

// GetUserByEmailCalls gets all the calls that were made to GetUserByEmail.
// Check the length with:
//     len(mockedRepo.GetUserByEmailCalls())
func (mock *RepoMock) GetUserByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockGetUserByEmail.RLock()
	calls = mock.calls.GetUserByEmail
	mock.lockGetUserByEmail.RUnlock()
	return calls
}

// GetUserByUserId calls GetUserByUserIdFunc.
func (mock *RepoMock) GetUserByUserId(ctx context.Context, userId int) (authModel.User, error) {
	if mock.GetUserByUserIdFunc == nil {
		panic("RepoMock.GetUserByUserIdFunc: method is nil but Repo.GetUserByUserId was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId int
	}{
		Ctx:    ctx,
		UserId: userId,
	}
	mock.lockGetUserByUserId.Lock()
	mock.calls.GetUserByUserId = append(mock.calls.GetUserByUserId, callInfo)
	mock.lockGetUserByUserId.Unlock()
	return mock.GetUserByUserIdFunc(ctx, userId)
}

// GetUserByUserIdCalls gets all the calls that were made to GetUserByUserId.
// Check the length with:
//     len(mockedRepo.GetUserByUserIdCalls())
func (mock *RepoMock) GetUserByUserIdCalls() []struct {
	Ctx    context.Context
	UserId int
} {
	var calls []struct {
		Ctx    context.Context
		UserId int
	}
	mock.lockGetUserByUserId.RLock()
	calls = mock.calls.GetUserByUserId
	mock.lockGetUserByUserId.RUnlock()
	return calls
}

// GetUsersByUsersId calls GetUsersByUsersIdFunc.
func (mock *RepoMock) GetUsersByUsersId(ctx context.Context, userIds []int) ([]authModel.User, error) {
	if mock.GetUsersByUsersIdFunc == nil {
		panic("RepoMock.GetUsersByUsersIdFunc: method is nil but Repo.GetUsersByUsersId was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		UserIds []int
	}{
		Ctx:     ctx,
		UserIds: userIds,
	}
	mock.lockGetUsersByUsersId.Lock()
	mock.calls.GetUsersByUsersId = append(mock.calls.GetUsersByUsersId, callInfo)
	mock.lockGetUsersByUsersId.Unlock()
	return mock.GetUsersByUsersIdFunc(ctx, userIds)
}

// GetUsersByUsersIdCalls gets all the calls that were made to GetUsersByUsersId.
// Check the length with:
//     len(mockedRepo.GetUsersByUsersIdCalls())
func (mock *RepoMock) GetUsersByUsersIdCalls() []struct {
	Ctx     context.Context
	UserIds []int
} {
	var calls []struct {
		Ctx     context.Context
		UserIds []int
	}
	mock.lockGetUsersByUsersId.RLock()
	calls = mock.calls.GetUsersByUsersId
	mock.lockGetUsersByUsersId.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *RepoMock) Register(ctx context.Context, newUser authModel.UserRegistration) (authModel.User, error) {
	if mock.RegisterFunc == nil {
		panic("RepoMock.RegisterFunc: method is nil but Repo.Register was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		NewUser authModel.UserRegistration
	}{
		Ctx:     ctx,
		NewUser: newUser,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(ctx, newUser)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//     len(mockedRepo.RegisterCalls())
func (mock *RepoMock) RegisterCalls() []struct {
	Ctx     context.Context
	NewUser authModel.UserRegistration
} {
	var calls []struct {
		Ctx     context.Context
		NewUser authModel.UserRegistration
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}
