// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package collaboration

import (
	"context"
	collaborationModel "github.com/nabiel-syarif/playlist-api/internal/model/collaboration"
	"sync"
)

// Ensure, that RepoMock does implement Repo.
// If this is not the case, regenerate this file with moq.
var _ Repo = &RepoMock{}

// RepoMock is a mock implementation of Repo.
//
// 	func TestSomethingThatUsesRepo(t *testing.T) {
//
// 		// make and configure a mocked Repo
// 		mockedRepo := &RepoMock{
// 			AddCollaboratorFunc: func(ctx context.Context, playlistOwnerId int, playlistId int, req []collaborationModel.AddCollaboratorRequest) error {
// 				panic("mock out the AddCollaborator method")
// 			},
// 			RemoveCollaboratorFunc: func(ctx context.Context, playlistId int, req []collaborationModel.RemoveCollaboratorRequest) error {
// 				panic("mock out the RemoveCollaborator method")
// 			},
// 		}
//
// 		// use mockedRepo in code that requires Repo
// 		// and then make assertions.
//
// 	}
type RepoMock struct {
	// AddCollaboratorFunc mocks the AddCollaborator method.
	AddCollaboratorFunc func(ctx context.Context, playlistOwnerId int, playlistId int, req []collaborationModel.AddCollaboratorRequest) error

	// RemoveCollaboratorFunc mocks the RemoveCollaborator method.
	RemoveCollaboratorFunc func(ctx context.Context, playlistId int, req []collaborationModel.RemoveCollaboratorRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// AddCollaborator holds details about calls to the AddCollaborator method.
		AddCollaborator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PlaylistOwnerId is the playlistOwnerId argument value.
			PlaylistOwnerId int
			// PlaylistId is the playlistId argument value.
			PlaylistId int
			// Req is the req argument value.
			Req []collaborationModel.AddCollaboratorRequest
		}
		// RemoveCollaborator holds details about calls to the RemoveCollaborator method.
		RemoveCollaborator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PlaylistId is the playlistId argument value.
			PlaylistId int
			// Req is the req argument value.
			Req []collaborationModel.RemoveCollaboratorRequest
		}
	}
	lockAddCollaborator    sync.RWMutex
	lockRemoveCollaborator sync.RWMutex
}

// AddCollaborator calls AddCollaboratorFunc.
func (mock *RepoMock) AddCollaborator(ctx context.Context, playlistOwnerId int, playlistId int, req []collaborationModel.AddCollaboratorRequest) error {
	if mock.AddCollaboratorFunc == nil {
		panic("RepoMock.AddCollaboratorFunc: method is nil but Repo.AddCollaborator was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		PlaylistOwnerId int
		PlaylistId      int
		Req             []collaborationModel.AddCollaboratorRequest
	}{
		Ctx:             ctx,
		PlaylistOwnerId: playlistOwnerId,
		PlaylistId:      playlistId,
		Req:             req,
	}
	mock.lockAddCollaborator.Lock()
	mock.calls.AddCollaborator = append(mock.calls.AddCollaborator, callInfo)
	mock.lockAddCollaborator.Unlock()
	return mock.AddCollaboratorFunc(ctx, playlistOwnerId, playlistId, req)
}

// AddCollaboratorCalls gets all the calls that were made to AddCollaborator.
// Check the length with:
//     len(mockedRepo.AddCollaboratorCalls())
func (mock *RepoMock) AddCollaboratorCalls() []struct {
	Ctx             context.Context
	PlaylistOwnerId int
	PlaylistId      int
	Req             []collaborationModel.AddCollaboratorRequest
} {
	var calls []struct {
		Ctx             context.Context
		PlaylistOwnerId int
		PlaylistId      int
		Req             []collaborationModel.AddCollaboratorRequest
	}
	mock.lockAddCollaborator.RLock()
	calls = mock.calls.AddCollaborator
	mock.lockAddCollaborator.RUnlock()
	return calls
}

// RemoveCollaborator calls RemoveCollaboratorFunc.
func (mock *RepoMock) RemoveCollaborator(ctx context.Context, playlistId int, req []collaborationModel.RemoveCollaboratorRequest) error {
	if mock.RemoveCollaboratorFunc == nil {
		panic("RepoMock.RemoveCollaboratorFunc: method is nil but Repo.RemoveCollaborator was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		PlaylistId int
		Req        []collaborationModel.RemoveCollaboratorRequest
	}{
		Ctx:        ctx,
		PlaylistId: playlistId,
		Req:        req,
	}
	mock.lockRemoveCollaborator.Lock()
	mock.calls.RemoveCollaborator = append(mock.calls.RemoveCollaborator, callInfo)
	mock.lockRemoveCollaborator.Unlock()
	return mock.RemoveCollaboratorFunc(ctx, playlistId, req)
}

// RemoveCollaboratorCalls gets all the calls that were made to RemoveCollaborator.
// Check the length with:
//     len(mockedRepo.RemoveCollaboratorCalls())
func (mock *RepoMock) RemoveCollaboratorCalls() []struct {
	Ctx        context.Context
	PlaylistId int
	Req        []collaborationModel.RemoveCollaboratorRequest
} {
	var calls []struct {
		Ctx        context.Context
		PlaylistId int
		Req        []collaborationModel.RemoveCollaboratorRequest
	}
	mock.lockRemoveCollaborator.RLock()
	calls = mock.calls.RemoveCollaborator
	mock.lockRemoveCollaborator.RUnlock()
	return calls
}
