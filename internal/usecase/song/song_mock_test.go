// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package song

import (
	"context"
	modelSong "github.com/nabiel-syarif/playlist-api/internal/model/song"
	"sync"
)

// Ensure, that RepoMock does implement Repo.
// If this is not the case, regenerate this file with moq.
var _ Repo = &RepoMock{}

// RepoMock is a mock implementation of Repo.
//
// 	func TestSomethingThatUsesRepo(t *testing.T) {
//
// 		// make and configure a mocked Repo
// 		mockedRepo := &RepoMock{
// 			DeleteSongByIdFunc: func(ctx context.Context, id int) error {
// 				panic("mock out the DeleteSongById method")
// 			},
// 			GetSongByIdFunc: func(ctx context.Context, id int) (modelSong.Song, error) {
// 				panic("mock out the GetSongById method")
// 			},
// 			GetSongsFunc: func(ctx context.Context) ([]modelSong.Song, error) {
// 				panic("mock out the GetSongs method")
// 			},
// 			InsertSongFunc: func(ctx context.Context, song modelSong.InsertSongRequest) (modelSong.Song, error) {
// 				panic("mock out the InsertSong method")
// 			},
// 			UpdateSongByIdFunc: func(ctx context.Context, id int, song modelSong.InsertSongRequest) (modelSong.Song, error) {
// 				panic("mock out the UpdateSongById method")
// 			},
// 		}
//
// 		// use mockedRepo in code that requires Repo
// 		// and then make assertions.
//
// 	}
type RepoMock struct {
	// DeleteSongByIdFunc mocks the DeleteSongById method.
	DeleteSongByIdFunc func(ctx context.Context, id int) error

	// GetSongByIdFunc mocks the GetSongById method.
	GetSongByIdFunc func(ctx context.Context, id int) (modelSong.Song, error)

	// GetSongsFunc mocks the GetSongs method.
	GetSongsFunc func(ctx context.Context) ([]modelSong.Song, error)

	// InsertSongFunc mocks the InsertSong method.
	InsertSongFunc func(ctx context.Context, song modelSong.InsertSongRequest) (modelSong.Song, error)

	// UpdateSongByIdFunc mocks the UpdateSongById method.
	UpdateSongByIdFunc func(ctx context.Context, id int, song modelSong.InsertSongRequest) (modelSong.Song, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteSongById holds details about calls to the DeleteSongById method.
		DeleteSongById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetSongById holds details about calls to the GetSongById method.
		GetSongById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetSongs holds details about calls to the GetSongs method.
		GetSongs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// InsertSong holds details about calls to the InsertSong method.
		InsertSong []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Song is the song argument value.
			Song modelSong.InsertSongRequest
		}
		// UpdateSongById holds details about calls to the UpdateSongById method.
		UpdateSongById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
			// Song is the song argument value.
			Song modelSong.InsertSongRequest
		}
	}
	lockDeleteSongById sync.RWMutex
	lockGetSongById    sync.RWMutex
	lockGetSongs       sync.RWMutex
	lockInsertSong     sync.RWMutex
	lockUpdateSongById sync.RWMutex
}

// DeleteSongById calls DeleteSongByIdFunc.
func (mock *RepoMock) DeleteSongById(ctx context.Context, id int) error {
	if mock.DeleteSongByIdFunc == nil {
		panic("RepoMock.DeleteSongByIdFunc: method is nil but Repo.DeleteSongById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteSongById.Lock()
	mock.calls.DeleteSongById = append(mock.calls.DeleteSongById, callInfo)
	mock.lockDeleteSongById.Unlock()
	return mock.DeleteSongByIdFunc(ctx, id)
}

// DeleteSongByIdCalls gets all the calls that were made to DeleteSongById.
// Check the length with:
//     len(mockedRepo.DeleteSongByIdCalls())
func (mock *RepoMock) DeleteSongByIdCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockDeleteSongById.RLock()
	calls = mock.calls.DeleteSongById
	mock.lockDeleteSongById.RUnlock()
	return calls
}

// GetSongById calls GetSongByIdFunc.
func (mock *RepoMock) GetSongById(ctx context.Context, id int) (modelSong.Song, error) {
	if mock.GetSongByIdFunc == nil {
		panic("RepoMock.GetSongByIdFunc: method is nil but Repo.GetSongById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetSongById.Lock()
	mock.calls.GetSongById = append(mock.calls.GetSongById, callInfo)
	mock.lockGetSongById.Unlock()
	return mock.GetSongByIdFunc(ctx, id)
}

// GetSongByIdCalls gets all the calls that were made to GetSongById.
// Check the length with:
//     len(mockedRepo.GetSongByIdCalls())
func (mock *RepoMock) GetSongByIdCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetSongById.RLock()
	calls = mock.calls.GetSongById
	mock.lockGetSongById.RUnlock()
	return calls
}

// GetSongs calls GetSongsFunc.
func (mock *RepoMock) GetSongs(ctx context.Context) ([]modelSong.Song, error) {
	if mock.GetSongsFunc == nil {
		panic("RepoMock.GetSongsFunc: method is nil but Repo.GetSongs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetSongs.Lock()
	mock.calls.GetSongs = append(mock.calls.GetSongs, callInfo)
	mock.lockGetSongs.Unlock()
	return mock.GetSongsFunc(ctx)
}

// GetSongsCalls gets all the calls that were made to GetSongs.
// Check the length with:
//     len(mockedRepo.GetSongsCalls())
func (mock *RepoMock) GetSongsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetSongs.RLock()
	calls = mock.calls.GetSongs
	mock.lockGetSongs.RUnlock()
	return calls
}

// InsertSong calls InsertSongFunc.
func (mock *RepoMock) InsertSong(ctx context.Context, song modelSong.InsertSongRequest) (modelSong.Song, error) {
	if mock.InsertSongFunc == nil {
		panic("RepoMock.InsertSongFunc: method is nil but Repo.InsertSong was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Song modelSong.InsertSongRequest
	}{
		Ctx:  ctx,
		Song: song,
	}
	mock.lockInsertSong.Lock()
	mock.calls.InsertSong = append(mock.calls.InsertSong, callInfo)
	mock.lockInsertSong.Unlock()
	return mock.InsertSongFunc(ctx, song)
}

// InsertSongCalls gets all the calls that were made to InsertSong.
// Check the length with:
//     len(mockedRepo.InsertSongCalls())
func (mock *RepoMock) InsertSongCalls() []struct {
	Ctx  context.Context
	Song modelSong.InsertSongRequest
} {
	var calls []struct {
		Ctx  context.Context
		Song modelSong.InsertSongRequest
	}
	mock.lockInsertSong.RLock()
	calls = mock.calls.InsertSong
	mock.lockInsertSong.RUnlock()
	return calls
}

// UpdateSongById calls UpdateSongByIdFunc.
func (mock *RepoMock) UpdateSongById(ctx context.Context, id int, song modelSong.InsertSongRequest) (modelSong.Song, error) {
	if mock.UpdateSongByIdFunc == nil {
		panic("RepoMock.UpdateSongByIdFunc: method is nil but Repo.UpdateSongById was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   int
		Song modelSong.InsertSongRequest
	}{
		Ctx:  ctx,
		ID:   id,
		Song: song,
	}
	mock.lockUpdateSongById.Lock()
	mock.calls.UpdateSongById = append(mock.calls.UpdateSongById, callInfo)
	mock.lockUpdateSongById.Unlock()
	return mock.UpdateSongByIdFunc(ctx, id, song)
}

// UpdateSongByIdCalls gets all the calls that were made to UpdateSongById.
// Check the length with:
//     len(mockedRepo.UpdateSongByIdCalls())
func (mock *RepoMock) UpdateSongByIdCalls() []struct {
	Ctx  context.Context
	ID   int
	Song modelSong.InsertSongRequest
} {
	var calls []struct {
		Ctx  context.Context
		ID   int
		Song modelSong.InsertSongRequest
	}
	mock.lockUpdateSongById.RLock()
	calls = mock.calls.UpdateSongById
	mock.lockUpdateSongById.RUnlock()
	return calls
}
